<%= form_for(@item) do |f| %>
  <% if @item.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@item.errors.count, "error") %> prohibited this item from being saved:</h2>

      <ul>
      <% @item.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <div class="field">
    <%= f.label :description %><br>
    <%= f.text_area :description, class: "form-control" %>
  </div>
    <div class="field">
    <%= f.label :state_asset_tag %><br>
    <%= f.text_field :state_asset_tag, class: "form-control" %>
  </div>
  <div class="field">
    <%= f.label :agency_id %><br>
    <%= f.select :agency_id, Agency.all.collect {|x| [x.agency_name, x.id]}, {:include_blank => "Select One"}, class: "form-control" %>
  </div>
  <div class="field">
    <%= f.label "Assigned to (email)" %>
    <div class="btn btn-xs btn-info" onclick="assignMe()"><span>Me</span></div>
    <%= f.text_field :assigned_to, class: "form-control" %>
  </div>
  <br />
  
  <%= f.label "Address" %>
  <div class="btn btn-xs btn-success" onClick="addressFromHere()">
    <span class="hidden-xs">Search Google Maps</span>
    <span class="glyphicon glyphicon-map-marker hidden-lg hidden-xl hidden-md hidden-sm "></span>
  </div>
  <div class="btn btn-xs btn-info" onClick="addressFromDatabase()">
    <span class="hidden-xs">Search Database</span>
    <span class="glyphicon glyphicon-hdd hidden-lg hidden-xl hidden-md hidden-sm "></span>
  </div>
  <div id="addressSpinner" class="btn-md fa fa-spinner fa-spin" style="display:none"></div>
  <div class="well">

  <div id="geolocationPager" style="display:none;">
    Found: 
    <span class="glyphicon glyphicon-chevron-left" onclick="prevAddress()"></span>
    <span id="currentAddressIndex"></span> of <span id="numberNearbyAddresses"></span>
    <span class="glyphicon glyphicon-chevron-right" onclick="nextAddress()"></span>
  </div>

  <div class="field">
    <%= f.label :street %><br>
    <%= f.text_field :street, class: "form-control" %>
  </div>
  <div class="field">
    <%= f.label :city %><br>
    <%= f.text_field :city, class: "form-control" %>
  </div>
  <div class="field">
    <%= f.label :state_id %><br>
    <%= f.select :state_id, State.all.collect {|x| [x.state_abbr, x.id]}, {:include_blank => "Select One"}, class: "form-control", :selected => 5 %>
  </div>
  <div class="field">
    <%= f.label :zip %><br>
    <%= f.text_field :zip, class: "form-control" %>
  </div>
  </div>
  <br />
  
  <%= f.label "Location" %>
  <div class="btn btn-xs btn-success" onClick="updateLocation()">
    <span class="hidden-xs">Update (Current location)</span>
    <span class="glyphicon glyphicon-map-marker hidden-lg hidden-xl hidden-md hidden-sm "></span>
  </div>
  <div class="btn btn-xs btn-info" onClick="codeAddress()">
    <span class="hidden-xs">Update (Address)</span>
    <span class="glyphicon glyphicon-road hidden-lg hidden-xl hidden-md hidden-sm "></span>
  </div>
  <div id="locationSpinner" class="btn-md fa fa-spinner fa-spin" style="display:none"></div>
  <div class="well">
    <div class="field">
      <%= f.label "Latitude" %><br>
      <%= f.text_field :loc_lat, class: "form-control"%>
    </div>
    <div class="field">
      <%= f.label "Longitude" %><br>
      <%= f.text_field :loc_long, class: "form-control"%>
    </div>
  </div>
  
  <div class="actions">
    <%= f.submit class: "btn btn-primary" %>
  </div>
<% end %>

<script>

  aSpinner = $('#addressSpinner');
  lSpinner = $('#locationSpinner');

  function updateLocation(){
    
    if (navigator.geolocation) {
      console.log("Geolocation succeeded");
        lSpinner.show();
        navigator.geolocation.getCurrentPosition(populateFields);
    } else {
      console.log("Geolocation failed");
        alert("Geolocation is not supported by this browser.");
    }
  }
  
  function populateFields(position) {
    lSpinner.hide();
    $('#item_loc_lat').val(position.coords.latitude);
    $('#item_loc_long').val(position.coords.longitude); 
  }
  
  var geocoder;
  function initMap() {
    geocoder = new google.maps.Geocoder();
  }
  
  function addressFromDatabase(){
    if (navigator.geolocation) {
      aSpinner.show();
        navigator.geolocation.getCurrentPosition(getNearbyFromDatabase);
    } else {
        alert("Geolocation is not supported by this browser.");
    }
  }
  
  function getNearbyFromDatabase(position){
      var lat = position.coords.latitude;
      var lng = position.coords.longitude; 
      
      $.ajax(
        {
          url: "/items/nearby?lat=" + lat + "&lng=" + lng, 
          success: function(result){
            nearby = result;
            index = 0;
            updatePager();
          },
          complete: function(){
            aSpinner.hide();
          }
        });
  }
  
  function addressFromHere(){
    if (navigator.geolocation) {
      aSpinner.show();
      navigator.geolocation.getCurrentPosition(reverseGeocode);
    } else {
      alert("Geolocation is not supported by this browser.");
    }
  }
  
  var nearby;
  function reverseGeocode(position) {
    var latlng = {lat: position.coords.latitude, 
                  lng: position.coords.longitude};   
    
    geocoder.geocode( { 'location': latlng}, function(results, status) {
      //whether it worked or not, hide spinner
      aSpinner.hide();
      
      if (status == google.maps.GeocoderStatus.OK && results.length > 0) {
        
        console.log(results);
        nearby = parseReverse(results);
        console.log(nearby);
        index = 0;
        updatePager();
        assignToAddressFields(nearby[0]);

      } else {
        alert("Reverse Geocode was not successful for the following reason: " + status);
      }
    });
  }
  
  var index = 0;
  function prevAddress(){
    if(index == 0)
      index = nearby.length - 1;
    else
      index -= 1;
      
    assignToAddressFields(nearby[index]);
  }
  
  function nextAddress(){
    index = (index + 1) % nearby.length;
    assignToAddressFields(nearby[index]);
  }
  
  function assignToAddressFields(location){
        $('#item_street').val((location.street_number || '') + " " + (location.route || ''));
        $('#item_city').val(location.city); 
        var state = location.state;
        $("#item_state_id option").filter(function() {
             return this.text == state; 
        }).attr('selected', true);
        $("#item_zip").val(location.zip);
        updatePager();
  }
  
  function updatePager(){
    var pager = $('#geolocationPager');
    
    if(!nearby || nearby.length == 0){
      pager.hide();
    } 
    else {
      pager.show();
      $('#currentAddressIndex').text(index + 1);
      $('#numberNearbyAddresses').text(nearby.length);
    }
  }
  
  function parseReverse(results){
    
    var parsed = [];
    
    for(var i = 0; i < results.length; i++){
      var result = {};
      var comps = results[i].address_components;
      for(var j = 0; j < comps.length; j++){
        var types = results[i].address_components[j].types;
        for(var k = 0; k < types.length; k++){
          switch(results[i].address_components[j].types[k]){
            case "street_number":
              result.street_number = results[i].address_components[j].short_name;
            break;
            case "route":
              result.route = results[i].address_components[j].short_name;
            break;
            case "locality":
              result.city = results[i].address_components[j].short_name;
            break;
            case "administrative_area_level_1":
              result.state = results[i].address_components[j].short_name;
            break;
            case "postal_code":
              result.zip = results[i].address_components[j].short_name;
            break;
          }  
        }
      }
      
      if(result.city && result.state && result.zip)
        parsed.push(result);
    }
    
    return parsed;
  }
  
  function codeAddress() {
    lSpinner.show();
    var address = $("#item_street").val() + ' ' +
                  $("#item_city").val() + ' ' +
                  $("#item_state_id :selected").text() + ' ' +
                  $("#item_zip").val();
                  
    console.log(address);              
    geocoder.geocode( { 'address': address}, function(results, status) {
      lSpinner.hide();
      if (status == google.maps.GeocoderStatus.OK) {
        $('#item_loc_lat').val(results[0].geometry.location.lat);
        $('#item_loc_long').val(results[0].geometry.location.lng); 
      } else {
        alert("Geocode was not successful for the following reason: " + status);
      }
    });
  }
      
  function assignMe(){
    $('#item_assigned_to').val('<%= current_user.email %>');
  }
      
</script>
<script src="//maps.googleapis.com/maps/api/js?key=AIzaSyCewGn8rk7jFOj6DDiB1LjI7uYE3vlCTiI&callback=initMap" async defer></script>
